{"pageProps":{"post":{"layout":"post","title":"OrderBy and null in C#","description":"An interesting observation concerning OrderBy and null interaction in C#","date":"2020-02-26 21:36:00 +0100","slug":"order-by-and-null-in-csharp","content":"<p>Recently, I came across an - at first glance - startling interaction between <code>OrderBy</code> and <code>null</code>. Suppose you have a list of players with their name and number of losses. Since it is a legacy implementation, new players \"Losses\" are initialized with <code>null</code>.</p>\n<pre><code class=\"language-c#\">class Player {\n    public string Name { get; set; }\n    public decimal? Losses { get; set; }\n}\n\nvar allEntries = new List&#x3C;Player>\n{\n    new Player { Name = \"Player A\", Losses = 5 },\n    new Player { Name = \"Player B\", Losses = 8 },\n    new Player { Name = \"Player C\", Losses = null },\n    new Player { Name = \"Player D\", Losses = 1 },\n    new Player { Name = \"Player F\", Losses = 10 },\n};\n</code></pre>\n<p>We want to get the top 3 players with the lowest number of losses to reward them. We can easily achieve that by using <code>OrderBy</code> and <code>Take</code>.</p>\n<pre><code class=\"language-c#\">var topEntries = allEntries\n    .OrderBy(e => e.Losses)\n    .Take(3)\n    .ToList();\n</code></pre>\n<p>Normally, we would expect our <code>topEntries</code> to contain the Players \"Player D\", \"Player A\" and \"Player B\" with 1, 5 and 8 losses respectively. However, soon we realize, that actually \"Player C\" is the top player with his <code>Losses = null</code>. So if you ever have to sort by a nullable property, be sure to remember that <code>null</code> values are ordered first by default. In the example, a fix would be trivial by filtering out null values before ordering.</p>\n<pre><code class=\"language-c#\">var topEntries = allEntries\n    .Where(e => e.Losses != null)\n    .OrderBy(e => e.Losses)\n    .Take(3)\n    .ToList();\n</code></pre>\n<h2>A deeper dive</h2>\n<p>How does that actually work internally? <code>OrderBy</code> uses an <code>IComparer</code> to compare entries and order them properly. It is possible to specify a custom implementation as the second argument for the <code>OrderBy</code> method. If no argument is provided, it will fall back to <code>Comparer&#x3C;decimal?>.Default</code>. Since our type is nullable, this will be a <code>NullableComparer&#x3C;decimal?></code>. You can checkout the whole logic and implementation <a href=\"https://github.com/microsoft/referencesource/blob/master/mscorlib/system/collections/generic/comparer.cs\">on GitHub</a>. The important part is the <code>Compare</code> method.</p>\n<pre><code class=\"language-c#\">// NullableComparer&#x3C;T> implementation\npublic override int Compare(Nullable&#x3C;T> x, Nullable&#x3C;T> y) {\n    if (x.HasValue) {\n        if (y.HasValue) return x.value.CompareTo(y.value);\n        return 1;\n    }\n    if (y.HasValue) return -1;\n    return 0;\n}\n</code></pre>\n<p>If you are unsure, what the return values of -1, 0 and +1 mean in that context, you can always refer to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable?view=netframework-4.8\">the Documentation</a>. Basically, if the value is less than zero, \"x\" is ordered first. If the value is greater than zero, \"y\" is ordered first. So if we examine the <code>NullableComparer&#x3C;T>::Compare</code> implementation, we get the following results:</p>\n<ul>\n<li>If \"x\" is <strong>NOT NULL</strong> and \"y\" is <strong>NOT NULL</strong> ➡ The smaller numeric value will be ordered first</li>\n<li>If \"x\" is <strong>NOT NULL</strong> and \"y\" is <strong>NULL</strong> ➡ \"y\" (null) is ordered first</li>\n<li>If \"x\" is <strong>NULL</strong> and \"y\" is <strong>NOT NULL</strong> ➡ \"x\" (null) is ordered first</li>\n<li>If \"x\" is <strong>NULL</strong> and \"y\" is <strong>NULL</strong> ➡ Both are null and don't need to be reordered.</li>\n</ul>\n<p>And that is the explanation, why <code>null</code> values are ordered first. As you see, with Microsoft publishing a lot of their source code on GitHub, it is straight forward to find the implementation of Framework functionality and reason about it.</p>\n<p><strong>Resources</strong></p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby?view=netframework-4.8\">MSDN Enumerable.OrderBy documentation</a></li>\n<li><a href=\"https://github.com/microsoft/referencesource/blob/master/mscorlib/system/collections/generic/comparer.cs\">Comparer of T source code</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable?view=netframework-4.8\">IComparable Interface documentation</a></li>\n</ul>\n","url":"https://zlypher.github.io/posts/order-by-and-null-in-csharp"}},"__N_SSG":true}